name: Docker publish (GHCR)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]     # e.g. v1.2.3
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build & (conditionally) push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize image name
        id: name
        run: |
          echo "IMAGE_NAME_LC=${GITHUB_REPOSITORY,,}" >> "$GITHUB_ENV"
          echo "Image will be: ${{ env.REGISTRY }}/$(echo ${GITHUB_REPOSITORY,,})"

      - name: Setup QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LC }}
          tags: |
            # tag pushes: use version (v1.2.3) + latest
            type=ref,event=tag
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            # main branch: edge + short SHA
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short
            # pull requests: pr-<num>
            type=ref,event=pr
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Container image for ${{ github.repository }}

      - name: Build (and push when not PR)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production